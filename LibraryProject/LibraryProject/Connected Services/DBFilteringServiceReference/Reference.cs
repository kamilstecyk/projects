//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LibraryProject.DBFilteringServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DBFilteringServiceReference.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllFilteredBooks", ReplyAction="http://tempuri.org/IService1/getAllFilteredBooksResponse")]
        string[] getAllFilteredBooks(string author, string type, long fromPrice, long toPrice, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllFilteredBooks", ReplyAction="http://tempuri.org/IService1/getAllFilteredBooksResponse")]
        System.Threading.Tasks.Task<string[]> getAllFilteredBooksAsync(string author, string type, long fromPrice, long toPrice, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllTypesOfBooks", ReplyAction="http://tempuri.org/IService1/getAllTypesOfBooksResponse")]
        string[] getAllTypesOfBooks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllTypesOfBooks", ReplyAction="http://tempuri.org/IService1/getAllTypesOfBooksResponse")]
        System.Threading.Tasks.Task<string[]> getAllTypesOfBooksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllAuthorOfBooks", ReplyAction="http://tempuri.org/IService1/getAllAuthorOfBooksResponse")]
        string[] getAllAuthorOfBooks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllAuthorOfBooks", ReplyAction="http://tempuri.org/IService1/getAllAuthorOfBooksResponse")]
        System.Threading.Tasks.Task<string[]> getAllAuthorOfBooksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllCurrencies", ReplyAction="http://tempuri.org/IService1/getAllCurrenciesResponse")]
        string[] getAllCurrencies();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllCurrencies", ReplyAction="http://tempuri.org/IService1/getAllCurrenciesResponse")]
        System.Threading.Tasks.Task<string[]> getAllCurrenciesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : LibraryProject.DBFilteringServiceReference.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<LibraryProject.DBFilteringServiceReference.IService1>, LibraryProject.DBFilteringServiceReference.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] getAllFilteredBooks(string author, string type, long fromPrice, long toPrice, string currency) {
            return base.Channel.getAllFilteredBooks(author, type, fromPrice, toPrice, currency);
        }
        
        public System.Threading.Tasks.Task<string[]> getAllFilteredBooksAsync(string author, string type, long fromPrice, long toPrice, string currency) {
            return base.Channel.getAllFilteredBooksAsync(author, type, fromPrice, toPrice, currency);
        }
        
        public string[] getAllTypesOfBooks() {
            return base.Channel.getAllTypesOfBooks();
        }
        
        public System.Threading.Tasks.Task<string[]> getAllTypesOfBooksAsync() {
            return base.Channel.getAllTypesOfBooksAsync();
        }
        
        public string[] getAllAuthorOfBooks() {
            return base.Channel.getAllAuthorOfBooks();
        }
        
        public System.Threading.Tasks.Task<string[]> getAllAuthorOfBooksAsync() {
            return base.Channel.getAllAuthorOfBooksAsync();
        }
        
        public string[] getAllCurrencies() {
            return base.Channel.getAllCurrencies();
        }
        
        public System.Threading.Tasks.Task<string[]> getAllCurrenciesAsync() {
            return base.Channel.getAllCurrenciesAsync();
        }
    }
}
