//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LibraryProject.DBoperationsServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DBoperationsServiceReference.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addUserToDB", ReplyAction="http://tempuri.org/IService1/addUserToDBResponse")]
        bool addUserToDB(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addUserToDB", ReplyAction="http://tempuri.org/IService1/addUserToDBResponse")]
        System.Threading.Tasks.Task<bool> addUserToDBAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/checkIfUserExists", ReplyAction="http://tempuri.org/IService1/checkIfUserExistsResponse")]
        bool checkIfUserExists(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/checkIfUserExists", ReplyAction="http://tempuri.org/IService1/checkIfUserExistsResponse")]
        System.Threading.Tasks.Task<bool> checkIfUserExistsAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/validateUserAccount", ReplyAction="http://tempuri.org/IService1/validateUserAccountResponse")]
        int validateUserAccount(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/validateUserAccount", ReplyAction="http://tempuri.org/IService1/validateUserAccountResponse")]
        System.Threading.Tasks.Task<int> validateUserAccountAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateUserAccount", ReplyAction="http://tempuri.org/IService1/updateUserAccountResponse")]
        bool updateUserAccount(string login, string password, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateUserAccount", ReplyAction="http://tempuri.org/IService1/updateUserAccountResponse")]
        System.Threading.Tasks.Task<bool> updateUserAccountAsync(string login, string password, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getRoleOfUser", ReplyAction="http://tempuri.org/IService1/getRoleOfUserResponse")]
        string getRoleOfUser(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getRoleOfUser", ReplyAction="http://tempuri.org/IService1/getRoleOfUserResponse")]
        System.Threading.Tasks.Task<string> getRoleOfUserAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getListOfUsers", ReplyAction="http://tempuri.org/IService1/getListOfUsersResponse")]
        string[] getListOfUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getListOfUsers", ReplyAction="http://tempuri.org/IService1/getListOfUsersResponse")]
        System.Threading.Tasks.Task<string[]> getListOfUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getIDOfUserLogin", ReplyAction="http://tempuri.org/IService1/getIDOfUserLoginResponse")]
        int getIDOfUserLogin(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getIDOfUserLogin", ReplyAction="http://tempuri.org/IService1/getIDOfUserLoginResponse")]
        System.Threading.Tasks.Task<int> getIDOfUserLoginAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addBook", ReplyAction="http://tempuri.org/IService1/addBookResponse")]
        bool addBook(string title, string author, string type, long price, string currency, int numberOfPages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addBook", ReplyAction="http://tempuri.org/IService1/addBookResponse")]
        System.Threading.Tasks.Task<bool> addBookAsync(string title, string author, string type, long price, string currency, int numberOfPages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/removeBook", ReplyAction="http://tempuri.org/IService1/removeBookResponse")]
        bool removeBook(string title, string author);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/removeBook", ReplyAction="http://tempuri.org/IService1/removeBookResponse")]
        System.Threading.Tasks.Task<bool> removeBookAsync(string title, string author);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateBook", ReplyAction="http://tempuri.org/IService1/updateBookResponse")]
        bool updateBook(string oldTitle, string newAuthor, string newType, long newPrice, string newCurrency, int newNumberOfPages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateBook", ReplyAction="http://tempuri.org/IService1/updateBookResponse")]
        System.Threading.Tasks.Task<bool> updateBookAsync(string oldTitle, string newAuthor, string newType, long newPrice, string newCurrency, int newNumberOfPages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getHistoryOfUserLeases", ReplyAction="http://tempuri.org/IService1/getHistoryOfUserLeasesResponse")]
        string[] getHistoryOfUserLeases(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getHistoryOfUserLeases", ReplyAction="http://tempuri.org/IService1/getHistoryOfUserLeasesResponse")]
        System.Threading.Tasks.Task<string[]> getHistoryOfUserLeasesAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllBooks", ReplyAction="http://tempuri.org/IService1/getAllBooksResponse")]
        string[] getAllBooks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllBooks", ReplyAction="http://tempuri.org/IService1/getAllBooksResponse")]
        System.Threading.Tasks.Task<string[]> getAllBooksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/leaseBookForUser", ReplyAction="http://tempuri.org/IService1/leaseBookForUserResponse")]
        bool leaseBookForUser(int userID, string title, string author);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/leaseBookForUser", ReplyAction="http://tempuri.org/IService1/leaseBookForUserResponse")]
        System.Threading.Tasks.Task<bool> leaseBookForUserAsync(int userID, string title, string author);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllAvailableBooksToLease", ReplyAction="http://tempuri.org/IService1/getAllAvailableBooksToLeaseResponse")]
        string[] getAllAvailableBooksToLease();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllAvailableBooksToLease", ReplyAction="http://tempuri.org/IService1/getAllAvailableBooksToLeaseResponse")]
        System.Threading.Tasks.Task<string[]> getAllAvailableBooksToLeaseAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllCurrentlyLeasedBooksForUser", ReplyAction="http://tempuri.org/IService1/getAllCurrentlyLeasedBooksForUserResponse")]
        string[] getAllCurrentlyLeasedBooksForUser(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllCurrentlyLeasedBooksForUser", ReplyAction="http://tempuri.org/IService1/getAllCurrentlyLeasedBooksForUserResponse")]
        System.Threading.Tasks.Task<string[]> getAllCurrentlyLeasedBooksForUserAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/returnBookForUser", ReplyAction="http://tempuri.org/IService1/returnBookForUserResponse")]
        bool returnBookForUser(int userID, string title, string author);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/returnBookForUser", ReplyAction="http://tempuri.org/IService1/returnBookForUserResponse")]
        System.Threading.Tasks.Task<bool> returnBookForUserAsync(int userID, string title, string author);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/prolongLeaseOfBookForUser", ReplyAction="http://tempuri.org/IService1/prolongLeaseOfBookForUserResponse")]
        bool prolongLeaseOfBookForUser(int userID, System.DateTime prolongedDate, string title, string author);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/prolongLeaseOfBookForUser", ReplyAction="http://tempuri.org/IService1/prolongLeaseOfBookForUserResponse")]
        System.Threading.Tasks.Task<bool> prolongLeaseOfBookForUserAsync(int userID, System.DateTime prolongedDate, string title, string author);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getLeaseEndDateOfBookForUser", ReplyAction="http://tempuri.org/IService1/getLeaseEndDateOfBookForUserResponse")]
        System.DateTime getLeaseEndDateOfBookForUser(int userID, string title, string author);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getLeaseEndDateOfBookForUser", ReplyAction="http://tempuri.org/IService1/getLeaseEndDateOfBookForUserResponse")]
        System.Threading.Tasks.Task<System.DateTime> getLeaseEndDateOfBookForUserAsync(int userID, string title, string author);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : LibraryProject.DBoperationsServiceReference.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<LibraryProject.DBoperationsServiceReference.IService1>, LibraryProject.DBoperationsServiceReference.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool addUserToDB(string login, string password) {
            return base.Channel.addUserToDB(login, password);
        }
        
        public System.Threading.Tasks.Task<bool> addUserToDBAsync(string login, string password) {
            return base.Channel.addUserToDBAsync(login, password);
        }
        
        public bool checkIfUserExists(string login) {
            return base.Channel.checkIfUserExists(login);
        }
        
        public System.Threading.Tasks.Task<bool> checkIfUserExistsAsync(string login) {
            return base.Channel.checkIfUserExistsAsync(login);
        }
        
        public int validateUserAccount(string login, string password) {
            return base.Channel.validateUserAccount(login, password);
        }
        
        public System.Threading.Tasks.Task<int> validateUserAccountAsync(string login, string password) {
            return base.Channel.validateUserAccountAsync(login, password);
        }
        
        public bool updateUserAccount(string login, string password, string newPassword) {
            return base.Channel.updateUserAccount(login, password, newPassword);
        }
        
        public System.Threading.Tasks.Task<bool> updateUserAccountAsync(string login, string password, string newPassword) {
            return base.Channel.updateUserAccountAsync(login, password, newPassword);
        }
        
        public string getRoleOfUser(string login) {
            return base.Channel.getRoleOfUser(login);
        }
        
        public System.Threading.Tasks.Task<string> getRoleOfUserAsync(string login) {
            return base.Channel.getRoleOfUserAsync(login);
        }
        
        public string[] getListOfUsers() {
            return base.Channel.getListOfUsers();
        }
        
        public System.Threading.Tasks.Task<string[]> getListOfUsersAsync() {
            return base.Channel.getListOfUsersAsync();
        }
        
        public int getIDOfUserLogin(string login) {
            return base.Channel.getIDOfUserLogin(login);
        }
        
        public System.Threading.Tasks.Task<int> getIDOfUserLoginAsync(string login) {
            return base.Channel.getIDOfUserLoginAsync(login);
        }
        
        public bool addBook(string title, string author, string type, long price, string currency, int numberOfPages) {
            return base.Channel.addBook(title, author, type, price, currency, numberOfPages);
        }
        
        public System.Threading.Tasks.Task<bool> addBookAsync(string title, string author, string type, long price, string currency, int numberOfPages) {
            return base.Channel.addBookAsync(title, author, type, price, currency, numberOfPages);
        }
        
        public bool removeBook(string title, string author) {
            return base.Channel.removeBook(title, author);
        }
        
        public System.Threading.Tasks.Task<bool> removeBookAsync(string title, string author) {
            return base.Channel.removeBookAsync(title, author);
        }
        
        public bool updateBook(string oldTitle, string newAuthor, string newType, long newPrice, string newCurrency, int newNumberOfPages) {
            return base.Channel.updateBook(oldTitle, newAuthor, newType, newPrice, newCurrency, newNumberOfPages);
        }
        
        public System.Threading.Tasks.Task<bool> updateBookAsync(string oldTitle, string newAuthor, string newType, long newPrice, string newCurrency, int newNumberOfPages) {
            return base.Channel.updateBookAsync(oldTitle, newAuthor, newType, newPrice, newCurrency, newNumberOfPages);
        }
        
        public string[] getHistoryOfUserLeases(int userID) {
            return base.Channel.getHistoryOfUserLeases(userID);
        }
        
        public System.Threading.Tasks.Task<string[]> getHistoryOfUserLeasesAsync(int userID) {
            return base.Channel.getHistoryOfUserLeasesAsync(userID);
        }
        
        public string[] getAllBooks() {
            return base.Channel.getAllBooks();
        }
        
        public System.Threading.Tasks.Task<string[]> getAllBooksAsync() {
            return base.Channel.getAllBooksAsync();
        }
        
        public bool leaseBookForUser(int userID, string title, string author) {
            return base.Channel.leaseBookForUser(userID, title, author);
        }
        
        public System.Threading.Tasks.Task<bool> leaseBookForUserAsync(int userID, string title, string author) {
            return base.Channel.leaseBookForUserAsync(userID, title, author);
        }
        
        public string[] getAllAvailableBooksToLease() {
            return base.Channel.getAllAvailableBooksToLease();
        }
        
        public System.Threading.Tasks.Task<string[]> getAllAvailableBooksToLeaseAsync() {
            return base.Channel.getAllAvailableBooksToLeaseAsync();
        }
        
        public string[] getAllCurrentlyLeasedBooksForUser(int userID) {
            return base.Channel.getAllCurrentlyLeasedBooksForUser(userID);
        }
        
        public System.Threading.Tasks.Task<string[]> getAllCurrentlyLeasedBooksForUserAsync(int userID) {
            return base.Channel.getAllCurrentlyLeasedBooksForUserAsync(userID);
        }
        
        public bool returnBookForUser(int userID, string title, string author) {
            return base.Channel.returnBookForUser(userID, title, author);
        }
        
        public System.Threading.Tasks.Task<bool> returnBookForUserAsync(int userID, string title, string author) {
            return base.Channel.returnBookForUserAsync(userID, title, author);
        }
        
        public bool prolongLeaseOfBookForUser(int userID, System.DateTime prolongedDate, string title, string author) {
            return base.Channel.prolongLeaseOfBookForUser(userID, prolongedDate, title, author);
        }
        
        public System.Threading.Tasks.Task<bool> prolongLeaseOfBookForUserAsync(int userID, System.DateTime prolongedDate, string title, string author) {
            return base.Channel.prolongLeaseOfBookForUserAsync(userID, prolongedDate, title, author);
        }
        
        public System.DateTime getLeaseEndDateOfBookForUser(int userID, string title, string author) {
            return base.Channel.getLeaseEndDateOfBookForUser(userID, title, author);
        }
        
        public System.Threading.Tasks.Task<System.DateTime> getLeaseEndDateOfBookForUserAsync(int userID, string title, string author) {
            return base.Channel.getLeaseEndDateOfBookForUserAsync(userID, title, author);
        }
    }
}
